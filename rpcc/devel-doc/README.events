
The event system in PDB contains some generic event types (create,
update, destroy, note) and quite a lot of special event types.

A generic event system needs similar event types - perhaps augmented
with some more like "watchdog" events created when a mutex watchdog
expires. It is also necessary that applications can create their own
event types.

PDB events contain some standard attributes (happened_at, authuser,
type...) but also application specific attributes. Applications need
to be able to create their own attributes.

To some extent, it clarifies things that attributes are named "group",
"account" etc. At the same time, you still need to know exactly what
the event semantics are to interpret the database contents. "group"
can mean different things for different event types. Also "group2"
isn't a particularly pretty attribute name.

An alternative could be that events have named argument lists, each
argument having a type and a value.

Instead of "connected, group=foo, group2=bar, ggmship=103" it could be
'connected,parent=(group:"foo"),child=(group:"bar"),via=(ggmship:103)'.

At the same time, this implies that there will be a lot more event
attributes (since a group can be both a 'parent', 'child', 'via_group'
and whatnot). And more attributes aren't necessarily better. You still
need to know what you're looking at.


The ugliness we're trying to avoid is "group" and "group2" -
especially if we at some point would need a "group3" and "group4" for
example for representing "a and b connected via c and d".

Allowing the attributes to become a list would help a bit, but we
still want to have three sets in the above case: parent, child, and
intermediates. "groups[0] is the parent, groups[1] is the child and
groups[2:] are the intermediates" isn't particularly pretty.


Simple and explicit is better. Let's just have attributes. You need to
distinguish parent_group and child_group? Have two attributes called
that, then.


Event group handling

When are event groups created? In PDB it's explicit, but perhaps it
can be automated? If a Function creates more than one event, a group
is automatically created, otherwise the event is just added as-is?

But what would the type be of such an event-group? Should incoming
calls be events as well? Perhaps the call log should be replaced with
events......?


Calls as events

What is the call log? Well, it registers that "a call came in and
succeeded, producing X bytes" or "a call came in and failed", with
attributes like "function", "session", "response_length" and
"error_name".

Doesn't that sound an awful lot like a "call" event? Yes it does.

Such a "call" event would also make a natural base for an event group
on incoming calls, increasing traceability compared with PDB.

Soooo...


* On Function call, the Function fetches a database link.

* The EventManager is initialized. It writes and commits a possible
  marker event. An initial "call" event is created internally but not
  written yet.

* The .do() method does its thing, generating events in the
  EventManager as it goes.

* The EventManager keeps an event tree - events which should _not_
  be written if the Function fails and .rollback() is called, and
  events which should be written regardless of failure or success.

  The "call" event is of the latter type, and always committed. So are
  the events generated when an InternalError bubbles up from .do().

* An event is either a node or a leaf - if it is a node then a new
  subgroup i pushed on the EventManager's event stack, and this
  subgroup needs to be popped.

* An "always commit" event may never be child of a "commit on success"
  event, since it would be an orphan on failure. The opposite is OK
  though.

* When .do() finishes, the database is committed or rolled back as
  usual. 

  The EventManager is then asked to write all events, and is given a
  flag whether the .do method committed or rolled back. It is also
  given the parameters to log about the call (clock time, response
  size etc).
  
* The EventManager writes the events group by group, setting parent
  event attributes.

* If we want "call" events to only be generated in certain
  circumstances, it is the EventManager that determines this. It can
  for example avoid writing events for calls without sub-events, where
  the call succeeded and the elapsed time was less than .1 seconds.

* Finally, the database link is committed and returned.



Changes as compared to PDB

* A generic "watchdog" event that can be used to trigger actions when
  watchdogs expire.

* Update events are perhaps better named "update" than
  "attribute_set". 

* Including the old value in an update event makes rollbacks and
  comparisons much easier.

* The call log's "call_time" attribute is renamed "elapsed".

* When a session is created, a "create" event is created for it. With
  IP address and other stuff as attributes.

* When a session is authenticated, an "update" event is created for
  its "authuser" attribute.



Custom types and attributes.

The default event attributes:
  * id
  * created (when was the event created that noted this)
  * parent (or NULL, used to mark sub-events)
  
The default event manager has the event types:
  * create
    - attribute named after Model with new ID
  * update
    - attribute named after Model
    - oldint/newint or oldstr/newstr depending on attribute type
  * destroy
    - attribute named after Model
  * call
    - function, the function name and API version
    - params, the function parameters as a __repr__
    - authuser, if authenticated
    - session, is set (matching "create" event for session)
    - elapsed, noting clock time from start to end
    ON SUCCESS:
      - result_len, length in characters of the response sent
    ON FAILURE:
      - error, the last component of the error name
      - errval, the value of the error (.args)
      - where, the file and line in the code where the error was raised
      - stack (or NULL), the full stack trace if this was an InternalError
  * watchdog
    - mutex, the mutex' name
    - watchdog, the watchdog's name
  * marker
    <none>


The event types are described in an ExtEnum subclass. On server
startup, the EventManager _class_ (no function -> no instance) gets
the opportunity to update the database according to this ExtEnum.

To create application-specific event _types_, subclass ExtEventType
and replace its .values attribute. Then subclass EventManager and
ovveride the .event_types_enum attribute.


When the EventManager updates the database, it also uses the template
keys generated by the Event subtype to update the database tables.

To create application-specific event _attributes_, subclass Event and
add methods decorated with @template() to it. Then subclass
EventManager and override the .manages attribute with your new Event
subclass.




Database structure

Although the event table structure used by PDB is horrible for manual
searches, it is effient and works great for dig:ing. If non-webservice
event searches are important, a script could most likely be developed.

rpcc_event_type
  id
  name         VARCHAR(32)

rpcc_event
  id
  happened_at  TIMESTAMP
  event_at     TIMESTAMP
  authuser     VARCHAR(64)
  typ          -> rpcc_event_type(id)
  parent       -> rpcc_event

rpcc_event_string_attr
  id
  name         VARCHAR(32)

rpcc_event_string
  event        -> rpcc_event(id)
  attr         -> rpcc_event_string_attr  
  value        VARCHAR(1024)

rpcc_event_int_attr
  id
  name         VARCHAR(32)

rpcc_event_int
  event        -> rpcc_event(id)
  attr         -> rpcc_event_int_attr
  value        INTEGER


