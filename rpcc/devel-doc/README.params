
The .params attribute was previously fixed as a list of tuples

[(attr, type, desc), ...]

The normal PDB use was a PDBFunction, which by magic prepended the
"session" attribute to all its prototypes. Then the "person_functions"
module would normally define a tuple 

PERSONARG = ("person", PDBPersonType, "A person")

and all .params operating on a particular person be 

[PERSONARG,
 ("some", OtherType, "Argument")]


Let's instead introspect our parents' .params and prepend them. It is
an error if two parents on the same level of the inheritance chain
both define their own .params.

Function.params = None
SessionFunction(Function).params = [("session", Session, "Call context")]
PersonFunction(SessionFunction).params = [("person", Person, "A person")]



Second, the template argument to _dig() would always have been nice as
an optional argument. Let's implement that.


.params = [("person", PersonType, "A person"),
	   OptParam("template", TemplateType, "A template",
	            default=dict("_"=True))]

Oh, and certain options to group_create too...

.params = [("group_name", GroupNameType, "Name of group to create"),
	   OptParam("description", StringType, "Description"),
	   OptParam("unix_gid", UnixGIDType, "UNIX gid")]


The semantic is that actual arguments received must be a subsequence
of the parameters specified, starting from the beginning. You cannot
leave out parameters in the middle. Parameters that aren't sent will
get their attributes set to None, unless a "default"-value has been
specified. 


