#!/usr/bin/env python
'''
Created on 28 jan 2014

@author: bernerus
'''
import os

from rpcc_client import RPCC

ADHOC_RELEASE = "@@ADHOC_RELEASE@@"
ADHOC_GIT_VERSION = "@@ADHOC_GIT_VERSION@@"

# Configure
env_prefix = "PMAP"

srv_url = None
if env_prefix + "_SRV_URL" in os.environ:
    srv_url = os.environ[env_prefix + "_SRV_URL"]

if not srv_url:
    srv_url = "https://adhoc.ita.chalmers.se:8877"

# Connect and authenticate to AdHoc server
srv = RPCC(srv_url)

srv.session_auth_login(os.environ[env_prefix + "_ADHOC_USER"],
                       os.environ[env_prefix + "_ADHOC_PASSWORD"])

# Fetch hosts and rooms from AdHoc. Get only the Active hosts, but all rooms.
hosts = srv.host_dig({"status": "Active", "dns_is_set": True}, {"dns": True, "room": True, "group": True})
rooms = srv.room_dig({"room_pattern": "*"}, {"room": True, "printers": True, "info": True})


# Convert fetched information to manageable dicts.
room_info = {}
room_printers = {}
room_to_host = {}

for room, info, prts in [(x.room, x.info, x.printers) for x in rooms]:
    room_info[room] = info
    room_printers[room] = prts
    room_to_host[room] = set()

printers = set()
for room, host, group in [(x.room, x.dns, x.group) for x in hosts]:
    if room:
        room_to_host[room].add(host)
    if group == "printers":
        printers.add(host)

# Produce Linux stype mapping file
lf = open("PrinterConfig.new", "w")
print >>lf, "# Warning - THIS FILE IS AUTOMATICALLY GENERATED! CHANGES HERE WILL BE LOST"
print >>lf, "# Data file mapping terminal to printer setting"
print >>lf, "# Format: Each line contains terminal name followed by whitespace and"
print >>lf, "# printer name. Empty lines are disregarded, comments are on lines"
print >>lf, "# starting with #"
for room in sorted(room_info.keys()):
    if (len(room_to_host[room]) and room_printers[room]):
        print >>lf
        print >>lf, "# %s, Room %s" % (room_info[room].encode('iso-8859-1'), room.encode('iso-8859-1'))
        for host in sorted(room_to_host[room]):
            if room_printers[room]:
                print >>lf, host, room_printers[room].split(',')[-1]
print >>lf
print >>lf, "default NO_PRINTER"
print >>lf

lf.close()

# Produce windows style mapping file
wf = open("printers.txt.new", "w")
for room in sorted(room_info.keys()):
    if (len(room_to_host[room]) and room_printers[room]):
        for prter in room_printers[room].split(','):
            for host in sorted(room_to_host[room]):
                if host:
                    print >>wf, "%s;\\\\print.chalmers.se\%s\r" % (host.split(".")[0].upper(), prter)
wf.close()
