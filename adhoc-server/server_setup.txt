ADHOC-SERVER INSTALLATION INSTRUCTIONS
======================================

Version @@ADHOC_RELEASE@@

The instructions assume a 64 bit Red Hat Enterprise Linux system version 7 
with Python and Kerberos installed, including the python-kerberos package.
The system should be registered to receive updates from Red Hat. A RHEL 7 
virtual machine in IT Service' VMware Cluster conforms to this specification.

In case you're reading this from a paper or an old file, make sure to get
the latest revision of this document!




TRANSFERRED INSTALLATION FROM A PREVIOUSLY RUNNING  SYSTEM
==========================================================
 
Be aware that you cannot change the host name of the target server without
re-running these instructions from the start. Thus, make sure that you have
the correct SSL certificates with the intended final hostname and that
the host runs under that name. 


WHAT YOU NEED
=============

A. adhoc-server-x.y.z.tar, the adhoc server package.

   URL: https://utveckling.ita.chalmers.se/project/2
   
   Currently (2019-06-17) we use the following command
   
   wget https://utveckling.ita.chalmers.se/sites/utveckling.ita.chalmers.se/\
files/adhoc-server-1.11.0_0.tar   
  
B. Download MySQL Connector for Python. 

   Currently (2019-06-17) we use the following command
   
   wget https://dev.mysql.com/get/Downloads/Connector-Python/\
mysql-connector-python-cext-8.0.16-1.el7.x86_64.rpm
   
   wget https://dev.mysql.com/get/Downloads/Connector-Python/\
mysql-connector-python-8.0.16-1.el7.x86_64.rpm
   
C. The passwords to be used for the MySQL root and srvadhoc accounts.
   Make sure you have access to the database root password on the old server.
   These instructions assume you will use the same database root password.
   You CAN use another, but the instructions may not cover the effects of that change.

D. SSL server certificate and key files for the server hostname. 
   If you are installing the system as part of a disaster recovery, 
   retrieve the certificate and key files from the old system's backup.
   Otherwise, use ITS' standard routines to order a new SSL certificate.
   
E. A Kerberos keytab for the principal HTTP/$HOSTNAME@CHALMERS.SE where 
   $HOSTNAME is the server hostname. In the case of a disaster recovery, 
   try to retrieve the Kerberos keytab file from the old system's backup. 
   If this is not possible, or if you are installing a new system, contact 
   the Kerberos operations staff (teamunix@ita.chalmers.se) for help.
   
F. Make sure that $HOSTNAME and the hostname command returns the fully 
   qualified host name, i.e. one ending with .chalmers.se. If not, adjust 
   the network configuration.
   
G. The dhcpd server binary on the adhoc server and that its version is
   the same as on the production DHCP servers.


---------------------------------------------------------------------------

Part A: Server preparations

This part prepares the server machine with the needed accounts and supporting 
software packages. The instructions assume that the AdHoc server will be
installed in /cdg/adhoc. If not explicitly stated the instructions assume
that they are performed from the root account.

1.  Install the previously downloaded daemon utility

   rpm -i PACKAGE.rpm
  
2.  Install MariaDB server. 

   yum install mariadb-server

3.  Install the previously downloaded MySQL Connector for Python

   rpm -i PACKAGE.rpm   

4.  Start the MySQL server

   systemctl start mariadb

5.  Secure the installation:

    mysql_secure_installation
    
    Enter current password for root (enter for none):
    
    OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

Set root password? [Y/n] Y
New password: 
Re-enter new password: 
Password updated successfully!
Reloading privilege tables..
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

Remove anonymous users? [Y/n] Y
 ... Success!

Normally, root should only be allowed to connect from 'localhost'.  This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y/n] Y
 ... Success!

By default, MariaDB comes with a database named 'test' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y/n] Y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y/n] Y
 ... Success!

Cleaning up...

All done!  If you've completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!

6.  Enable Mariadb as a service

  systemctl enable mariadb
  
7.  Grant privileges for the local user srvadhoc to the database. Enter
    the MySQL root password previously defined when asked for the password
     
   DBPW='mxyzptlk'         <- Or something better

   mysql -u root -p <<EOF
         CREATE USER 'srvadhoc'@'$HOSTNAME' IDENTIFIED BY '$DBPW';
         GRANT USAGE ON *.* TO 'srvadhoc' IDENTIFIED BY '$DBPW' WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0 ;
         GRANT SELECT, INSERT, UPDATE, DELETE, CREATE TEMPORARY TABLES ON  AdHoc.* TO  'srvadhoc'@'$HOSTNAME';
         COMMIT;
EOF
Enter password: <The MariaDB password for root given in section 5>

8.  Open the firewall for TCP packets on port 8877 but from .chalmers.se only.
    The exact syntax depends on how you have set up your iptables configuration.
    Regard the following as an example only
     
   -A INPUT -p tcp -m state --state NEW -m tcp --dport 8877 -s 129.16.0.0/16 -j ACCEPT
   
9.  Create the local user srvadhoc with the personal group srvadhoc using the 
    UID and GID specified below:

   groupadd -g 127397 srvadhoc
   useradd  -r -u 127397 -g 127397 -d /cdg/adhoc srvadhoc
   mkdir -p /cdg/adhoc
   chown srvadhoc:srvadhoc /cdg/adhoc
   chmod 0700 /cdg/adhoc
   
10. Set a password for the new uer. Remember that password beacuse it is needed when transferring the data from the old system.
   
   passwd srvadhoc
   Ändrar lösenord för användare srvadhoc.
   Nytt lösenord:
   Ange nytt lösenord igen:
   

11. Create a directory for the adhoc server's keytab and certificate files

   mkdir ~srvadhoc/etc
   chown srvadhoc:srvadhoc ~srvadhoc/etc
   chmod 0775 ~srvadhoc/etc

12. Move the adhoc server's key and certificate files to ~srvadhoc/etc. Adjust
    file ownership and permissions according to the following.
    Beware that the cert file must contain the whole chain of certificates, so
    if you have been issued a certificate and a chain file, these two files will 
    have to be concatenated into the cert file.
    
   cd ~srvadhoc/etc
   chown srvadhoc:srvadhoc $HOSTNAME.cert $HOSTNAME.key
   chmod 0444 $HOSTNAME.cert
   chmod 0400 $HOSTNAME.key

13. Move the adhoc server's Kerberos keytab file to ~srvadhoc/etc, the file
    name should be "server.keytab". Adjust file ownership and permissions 
    according to the following

   chown srvadhoc:srvadhoc server.keytab
   chmod 0640 server.keytab
   
14. Create directories for variable data and symlinks pointing to these 
     locations. Here the server log, the server process ID, and the database
     backups will be stored. The software will assume that these folders are 
     located in /cdg/adhoc, thus symbolic links to the actual places are
     necessary, e.g.:

     mkdir -p /var/cdg/adhoc
     chown srvadhoc:srvadhoc /var/cdg/adhoc
     ln -s /var/cdg/adhoc /cdg/adhoc/var

     mkdir -p /usr/local/cdg/adhoc/backups
     chown srvadhoc:srvadhoc /usr/local/cdg/adhoc/backups
     ln -s /usr/local/cdg/adhoc/backups /cdg/adhoc/backups
  
---------------------------------------------------------------------------

 Part B. Installing the server software 

15. Install and configure the adhoc-server distibution

   cd /cdg/adhoc
   tar -xf adhoc-server-x.y.z.tar

   cd adhoc-server-x.y.z
   ./fix-files-adhoc-server.sh
  
16. Configure the adhoc-server startup environment. Check that RDBPW and DBPW 
    contains the correct passwords before proceeding to the next steps.
    
   echo $RDBPW
   echo $DBPW
 
   cd ~srvadhoc/etc
   touch bashrc.private
   chmod 600 bashrc.private
   sed s/YYY/$DBPW/ <../adhoc-server/etc/bashrc.private.prototype | sed s/ZZZ/$RDBPW/ >bashrc.private
   chown srvadhoc:srvadhoc bashrc.private
   
   Check that the setting of the ADHOC_DHCPD_PATH environment in bashrc.public points to
   the installed dhcpd binary

---------------------------------------------------------------------------

17. Change to the srvadhoc user and create the AdHoc database. Use the MySQL 
    root password previously defined when asked to enter a password. Return
    to the root usershell by issuing the "exit" command afterwards.

   su - srvadhoc   
   mysql -u root -p <adhoc-server/database.sql
   exit

---------------------------------------------------------------------------

18. As the root user again, initialize ADHOC_RUNTIME_HOME

   ADHOC_RUNTIME_HOME=`(cd ~srvadhoc/adhoc-server; pwd)`

19. Start the server manually: 

   su - srvadhoc $ADHOC_RUNTIME_HOME/bin/startserver.sh

20. Check connectivity. Replace <adhoc_server_host> with the actual FQDN 
    of the AdHoc Server you just started. The server should only be accessible
    from within Chalmers network, 129.16.0.0/255.255.0.0. Start your browser 
    and go to the following url:

   https://<adhoc_server_host>:8877

   The displayed page should read

     "Welcome to the AdHoc RPCC Server"
  
   on the first line.
   Stop the server with <Ctrl>-C.

21. Enable and start adhoc as a systemd service.
    (Distributing and storing the adhoc.service below a user directory is intentional, to ease
     the transition to when systemd user mode becomes available)

    mkdir -p ~srvadhoc/.config/systemd/user
    cp ~srvadhoc/adhoc-server/.config/systemd/user/adhoc.service ~srvadhoc/.config/systemd/user/
    ln -s  ~srvadhoc/.config/systemd/user/adhoc.service  /usr/lib/systemd/system
    systemctl enable adhoc
        
22. Check connectivity again, see step 20

23. Copy the cron job that creates the the database backup. This script 
    has the path to the backup script hardwired, so if the server software 
    is installed elsewhere than /cdg/adhoc, the cron job will have to be 
    changed.
    
    It is necessary that the script file is owned by root in order to be
    run by cron.
    
   cp $ADHOC_RUNTIME_HOME/etc/adhoc-server-backup.cron /etc/cron.d/adhoc-server-backup
   chown root:root /etc/cron.d/adhoc-server-backup

24. Transfer data from the previous installation

    Make a last backup on the old system.
    
    Move the backup file to the new system.
    Note: As the backup file name contains colons(:) it cannot be scp'd directly.
    
    old-adhoc> cd /cdg/adhoc/backups
    old-adhoc> ln -s `ls mysql_backup.*.gz | tail -1` transferred_to_new_adhoc.gz
    old-adhoc> scp transferred_to_new_adhoc.gz srvadhoc@<new_adhoc_host>:backups/transferred_from_old_adhoc.gz
    
    Restore that backup into the new database.
    
    cd ~srvadhoc/backups
    systemctl stop adhoc
    
    gunzip transferred_from_old_adhoc.gz
    
    Add the following SQL to the backup in order to transfer host privileges to the new host:
    
    export OHOST=<DNS name of the old host>
    export NHOST=`hostname`
    echo "UPDATE mysql.user set Host='$NHOST' WHERE Host='$OHOST';" >> transferred_from_old_adhoc
    echo "UPDATE mysql.db set Host='$NHOST' WHERE Host='$OHOST';" >> transferred_from_old_adhoc
    echo "COMMIT;" >> transferred_from_old_adhoc
    echo "FLUSH PRIVILEGES"  >> transferred_from_old_adhoc
    
    mysql -p -u root < transferred_from_old_adhoc
    Enter password:
    
    
25: Transfer the bashrc.private file form the old system to the new:

    old-adhoc> cd ~srvadhoc/backups
    old-adhoc> scp bashrc.private srvadhoc@<new_adhoc_host>:etc
    

25. Reboot and check that the server is running    

   /sbin/shutdown -r now
  
    See step 20 for checking connectivity.
    

---------------------------------------------------------------------------


UPGRADING THE SERVER SOFTWARE
=============================
 
Assuming logged in as root:
 
1. Stop the server

   systemctl stop adhoc
        
2. Expand the adhoc-server distribution

   cd /cdg/adhoc
   tar -xof adhoc-server-x.y.z.tar

3. Configure and activate the new adhoc-server installation

   cd adhoc-server-x.y.z
   ./fix-files-adhoc-server.sh
                
4. Restart the server

   systemctl start adhoc
        

