
A Function instance's .do() method is passed one argument - an
instance of the return type. It is illegal for the .do() method to
return anything.

For ExtNullType, nothing can be done.


For the simple types (ExtBoolType, ExtStringType, ExtIntegerType),
there is a .set() method, which peforms checks on the value and stores
the raw value if it is "correct".

There are two meanings to the word "correct", of which we can choose
either. First, there's "syntactically correct" (the .parse() method),
meaning that for example a string matches any set regexp. Then there's
"semantically correct" (the .lookup() method), which means that if the
type is said to represent account names, only values which actually do
that are accepted.

Looking up all return values (as opposed to just checking them) will
put a harder strain on the database link, but will guarantee that if
the server has returned a value in a return value of type FooType,
that value can always be sent back in an argument of type FooType.

When developing, we want the stricter checking of actually looking up
all values. In production, we can accept the cheaper but simpler
syntactical checks only.

in .call():
  ret = ExtStringType()
  ret.function = self
  self.do(ret)
  ret.verify(with_lookup=self.server.debug)

in .do():
  ret.set("Fula ord och vackra flickor")


For structs we want to check both keys (against mandatory/optional)
and values (against the respective subtype).

in .call():
  class BarType(ExtStructType):
    mandatory = {
      "baz": PDBBazType
    }

  class FooType(ExtStructType):
    mandatory = {
      "account": PDBAccountType
    }
    optional = {
      "privlist": ExtListType(PDBPrivType),
      "composed": BarType,
    }
      
  ret = FooType()
  ret.function = self
  self.do(ret)
  ret.verify(with_lookup=self.server.debug)

in .do():
  ret.account = "apa"
  ret.privlist.add("priv1")
  ret.privlist.extend(["priv2", "priv3"])

Wait a minute... We're adding a string rather than a PDBPrivType instance!

  ret.privlist.add(PDBPrivType("priv1"))

PDBPrivType normally returns a parsed value - here we're using an
instance to mean something else.

  ret.composed = {}
  ret.composed.baz = "A baz"

And we're setting a string raw!

  ret.composed = BarType()
  ret.composed.baz = PDBBazType
  ret.composed.baz.set("A baz")


Now, _this_ is a good indication that there's some old semantics here
that doesn't really work very well. At least not together with the new
ones.


So, instead, let's just say that the function returns a value, just
like before, but the difference being that we always send this value
through the return type's .parse() (and possibly .lookup()) methods.
