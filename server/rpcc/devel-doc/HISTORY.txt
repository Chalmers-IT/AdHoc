
RPCC (RPC på Chalmers)

RPCC är ett ramverk med vars hjälp man snabbt kan ta fram RPC-servrar
utvecklade i Python. Servrarna kan köras på alla Python-supportade
plattformar, vilket inkluderar Linux och Windows. 

RPC-servrarnas funktioner kan anropas via SOAP, JSON och XMLRPC, och
det ligger inbyggt i ramverket att automatiskt generera dokumentation
utifrån källkodens definitoner.

På ett konceptuellt plan kan man jämföra RPCC med WCF under
Microsoft's .NET - även om en server skriven i RPCC går fint att köra
under Windows.


Historia

RPCC började som "rpcserver"-ramverket som användes för att skriva PDB
på Chalmers 2007. Då kunde ramverket bara tolka XMLRPC. Ett år senare
adderades SOAP-stöd till ramverket, inklusive automatisk
WSDL-generering, vilket endast ökade kodbasen med 15%. PDB fick därmed
SOAP-stöd utan att PDB-utvecklarna behövde göra något arbete. 

2009 adderades stöd för parallella API-versioner för att stödja
ändringar i befintliga typer och funktioner som inte förstör för
existerande klienter.

2012 ägnades en eftermiddag åt att lägga till JSON-stöd, och sedan
dess är JSON den rekommenderade accessmetoden för de klienter som inte
vill dra ett fullt SOAP-lass.


Utveckling från "rpcserver" till RPCC

Under åren har mycket funktionalitet utvecklats för PDB som är
allmängiltig för RPC-servrar. Det mesta sådant har lyfts in i RPCC,
dock som frivilliga funktioner. Dessutom har behövliga förbättringar
gjorts.


* Förenklad databasaccess. Trådsäker poolning av länkar för databaser
  som behöver det (Oracle tar fortfarande 0.1 sek att skapa ny
  länk). Översättning av parameterformat.

* Kontroll av returtyper. En funktion _kan_ inte returnera fel typ.

* Mutexar och mutexvariabler. De flesta klienter till RPC-servrar vill
  hålla reda på enkel data mellan körningar, och se till att
  parallella instanser inte kör över varandra.

* Stöd för att övervaka klienter genom watchdogs.

* Ett eventsystem, där man kan registrera ändringar i en sökbar
  ändringslogg.

* Ett standardiserat datalager (PDB:s Object/ObjectHandler).

  * Dataformatterare, som med hjälp av det standardiserade datalagret
    kan skapa returdata med klient-specifierade fält, som följer
    länkar mellan datatyper.

  * Datasökare, som erbjuder sökbarhet både i SQL och i genererade
    attribut, och som kan följa länkar mellan datatyper.

  * Dig-funktioner, baserade på de två ovanstående.

  * Funktioner för att enkelt skapa behörighetskontroller och märka
    upp datalagrets metoder med behörighetskrav.


